<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<title>농구 게임 점프 포함</title>
<style>
  body {
    display: flex;
    justify-content: center;
    align-items: flex-end;
    height: 100vh;
    background-color: #87CEEB;
    margin: 0;
  }
  #gameCanvas {
    background-color: #F5DEB3;
    border: 3px solid #8B4513;
  }
</style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="500"></canvas>

<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// 게임 변수
const floorY = canvas.height - 20; // 바닥 y좌표
let player = {
  x: 150,
  y: floorY,
  width: 30,
  height: 50,
  color: 'blue',
  dy: 0,
  isJumping: false
};

let ball = {
  x: player.x + player.width/2,
  y: player.y - player.height/2,
  radius: 12,
  dx: 0,
  dy: 0,
  isHeld: true
};

let gravity = 0.6;
let friction = 0.8;

let hoop = { x: 700, y: 200, radius: 20, width: 10, backboardHeight: 100 };
let score = 0;

// 키 상태
let keys = {};

// 그리기
function drawPlayer() {
  ctx.fillStyle = player.color;
  ctx.fillRect(player.x, player.y - player.height, player.width, player.height);
}

function drawBall() {
  ctx.beginPath();
  ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
  ctx.fillStyle = 'orange';
  ctx.fill();
  ctx.closePath();
}

function drawHoop() {
  // 림
  ctx.beginPath();
  ctx.arc(hoop.x, hoop.y, hoop.radius, 0, Math.PI * 2);
  ctx.strokeStyle = 'red';
  ctx.lineWidth = 4;
  ctx.stroke();
  ctx.closePath();
  
  // 백보드
  ctx.fillStyle = 'white';
  ctx.fillRect(hoop.x + hoop.radius, hoop.y - hoop.backboardHeight/2, 10, hoop.backboardHeight);
}

function drawScore() {
  ctx.fillStyle = 'black';
  ctx.font = '24px Arial';
  ctx.fillText("Score: " + score, 20, 40);
}

// 게임 업데이트
function update() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // 키보드로 이동
  let speed = 5;
  if(keys['ArrowLeft'] || keys['a'] || keys['A']) player.x -= speed;
  if(keys['ArrowRight'] || keys['d'] || keys['D']) player.x += speed;

  // 점프 물리
  player.dy += gravity;
  player.y += player.dy;

  if(player.y > floorY){
    player.y = floorY;
    player.dy = 0;
    player.isJumping = false;
  }

  // 공 위치 업데이트
  if(ball.isHeld){
    ball.x = player.x + player.width/2;
    ball.y = player.y - player.height/2;
  } else {
    // 공 물리
    ball.x += ball.dx;
    ball.y += ball.dy;
    ball.dy += gravity;

    // 바닥 충돌
    if(ball.y + ball.radius > canvas.height){
      ball.y = canvas.height - ball.radius;
      ball.dy *= -friction;
      ball.dx *= friction;
    }

    // 좌우 벽 충돌
    if(ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width){
      ball.dx *= -friction;
    }

    // 림 충돌
    let dist = Math.hypot(ball.x - hoop.x, ball.y - hoop.y);
    if(dist < ball.radius + hoop.radius){
      let angle = Math.atan2(ball.y - hoop.y, ball.x - hoop.x);
      let overlap = ball.radius + hoop.radius - dist;
      ball.x += Math.cos(angle) * overlap;
      ball.y += Math.sin(angle) * overlap;
      ball.dx = Math.cos(angle) * Math.abs(ball.dx) * -0.7;
      ball.dy = Math.sin(angle) * Math.abs(ball.dy) * -0.7;
    }

    // 골 체크
    if(ball.x > hoop.x - 10 && ball.x < hoop.x + 10 && ball.y - ball.radius < hoop.y){
      score++;
      resetBall();
    }
  }

  drawPlayer();
  drawBall();
  drawHoop();
  drawScore();
  requestAnimationFrame(update);
}

// 공 초기화
function resetBall() {
  ball.isHeld = true;
  ball.dx = 0;
  ball.dy = 0;
}

// 키 입력
document.addEventListener('keydown', (e) => {
  keys[e.key] = true;
  // 스페이스 점프
  if(e.key === ' ' && !player.isJumping){
    player.dy = -12;
    player.isJumping = true;
  }
});
document.addEventListener('keyup', (e) => { keys[e.key] = false; });

// 마우스로 슛
let isDragging = false;
let startX, startY;

canvas.addEventListener('mousedown', (e) => {
  const rect = canvas.getBoundingClientRect();
  const mouseX = e.clientX - rect.left;
  const mouseY = e.clientY - rect.top;
  if(ball.isHeld && Math.hypot(mouseX - ball.x, mouseY - ball.y) < ball.radius){
    isDragging = true;
    startX = mouseX;
    startY = mouseY;
  }
});

canvas.addEventListener('mousemove', (e) => {
  if(isDragging){
    const rect = canvas.getBoundingClientRect();
    ball.x = e.clientX - rect.left;
    ball.y = e.clientY - rect.top;
  }
});

canvas.addEventListener('mouseup', (e) => {
  if(isDragging){
    const rect = canvas.getBoundingClientRect();
    let mouseX = e.clientX - rect.left;
    let mouseY = e.clientY - rect.top;
    ball.dx = (startX - mouseX)/10;
    ball.dy = (startY - mouseY)/10;
    ball.isHeld = false;
    isDragging = false;
  }
});

// 게임 시작
update();
</script>
</body>
</html>
